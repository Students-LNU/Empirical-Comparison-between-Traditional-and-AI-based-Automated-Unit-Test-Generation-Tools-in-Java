/*
 * This file was automatically generated by EvoSuite
 * Wed May 10 12:11:35 GMT 2023
 */

package org.apache.commons.math3.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.Field;
import org.apache.commons.math3.FieldElement;
import org.apache.commons.math3.util.MathArrays;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class MathArrays_ESTest extends MathArrays_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 2145386496;
      floatArray0[1] = (-1.0F);
      MathArrays.equals(floatArray0, floatArray0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 2145386496;
      double[] doubleArray1 = new double[3];
      doubleArray1[1] = 20.0;
      doubleArray1[2] = 2447.9;
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      double[] doubleArray2 = new double[9];
      doubleArray2[3] = (double) (-1.0F);
      doubleArray2[6] = (double) 527;
      doubleArray2[7] = (-321.4918787076);
      doubleArray2[8] = (double) 946;
      try { 
        MathArrays.ebeSubtract(doubleArray1, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1338.0337628620198;
      doubleArray0[1] = 748.466;
      doubleArray0[2] = 1.34217729E8;
      doubleArray0[3] = 2842.35302734375;
      doubleArray0[4] = 2648.05;
      doubleArray0[5] = (-382.62);
      doubleArray0[6] = (-690.21063463705);
      doubleArray0[7] = 3223.8246173;
      doubleArray0[8] = 2.17333333333333171E18;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      MathArrays.copyOf(doubleArray0, 4);
      MathArrays.OrderDirection.values();
      MathArrays.distance(doubleArray0, doubleArray0);
      MathArrays.copyOf(doubleArray0);
      MathArrays.scaleInPlace((-1106.2078), doubleArray1);
      int[] intArray0 = new int[1];
      intArray0[0] = 4;
      MathArrays.distance1(intArray0, intArray0);
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 4;
      MathArrays.equals(floatArray0, floatArray0);
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = (double) 4.0F;
      MathArrays.checkPositive(doubleArray2);
      int[] intArray1 = new int[8];
      intArray1[0] = (-2087);
      intArray1[1] = 4;
      intArray1[2] = 4368;
      intArray1[3] = 0;
      intArray1[4] = 4;
      intArray1[5] = 0;
      intArray1[6] = 4;
      intArray1[7] = 2097;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(intArray1, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[0][5];
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-701.4764F);
      floatArray0[1] = (-326.49188F);
      floatArray0[2] = (-3817.497F);
      floatArray0[3] = 1.4E-45F;
      floatArray0[4] = 2117.2183F;
      floatArray0[5] = 0.0F;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      MathArrays.ebeMultiply(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-233.682F);
      floatArray0[1] = (-4049.71F);
      floatArray0[2] = (-4049.71F);
      floatArray0[3] = 0.0F;
      floatArray0[5] = 3.4028235E38F;
      floatArray0[6] = 2842.353F;
      floatArray0[7] = (-1.0F);
      floatArray0[8] = 0.0F;
      MathArrays.equals(floatArray0, floatArray0);
      MathArrays.linearCombination(0.0, (double) 2842.353F, (double) 2842.353F, (-322.4699), (double) 2842.353F, (double) 0.0F, (double) 0.0F, (-5025.2916));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) (-4049.71F);
      doubleArray0[2] = (-916573.2964922363);
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) 2842.353F;
      doubleArray0[5] = (double) 0.0F;
      doubleArray0[6] = 2842.35302734375;
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (double) (-4049.71F);
      doubleArray1[2] = (double) (-233.682F);
      MathArrays.equals(doubleArray0, doubleArray1);
      Class<FieldElement> class0 = FieldElement.class;
      Integer integer0 = new Integer(217);
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(class0).when(field0).getZero();
      MathArrays.copyOf(doubleArray1);
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 1788, 1788);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = ", kl$xx7";
      stringArray0[2] = "$VALUES";
      stringArray0[3] = "a";
      stringArray0[4] = "org.apache.commons.math3.exception.MathIllegalArgumentException";
      stringArray0[5] = "6?4tfYZ/2E";
      stringArray0[6] = "@KDN//V+-";
      stringArray0[7] = ":lXA,8.j;'uML";
      MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      MathArrays.equals((double[]) null, (double[]) null);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[0];
      MathArrays.ebeSubtract(doubleArray0, doubleArray1);
      long[] longArray0 = new long[3];
      longArray0[0] = (-7278142539171889152L);
      longArray0[1] = (-1248L);
      long long0 = (-2453L);
      longArray0[2] = (-2453L);
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -7,278,142,539,171,889,152 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = 40.19140625;
      doubleArray0[0] = 40.19140625;
      double double1 = (-126.553553);
      doubleArray0[1] = (-126.553553);
      double double2 = (-1.0);
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 884.8381417;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      MathArrays.linearCombination(doubleArray0, doubleArray1);
      float[] floatArray0 = new float[0];
      float[] floatArray1 = null;
      MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true, false);
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -126.554 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = 40.19140625;
      doubleArray0[0] = 40.19140625;
      double double1 = 3802627.321472989;
      doubleArray0[1] = 3802627.321472989;
      double double2 = (-1756.111);
      doubleArray0[2] = (-1756.111);
      doubleArray0[3] = 884.8381417;
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      float[] floatArray0 = new float[0];
      float[] floatArray1 = null;
      MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,756.111 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 3020.0;
      doubleArray0[1] = 3020.0;
      MathArrays.convolve(doubleArray0, doubleArray0);
      Integer[] integerArray0 = null;
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 3020.0;
      doubleArray1[1] = 3020.0;
      doubleArray1[2] = 3020.0;
      try { 
        MathArrays.ebeDivide(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-2359.83019426424);
      doubleArray0[1] = 2705.6380586;
      doubleArray0[2] = (-2499.36261);
      doubleArray0[3] = 7.848361555046424E-8;
      doubleArray0[4] = 1.7976931348623157E308;
      doubleArray0[5] = 2.608E18;
      doubleArray0[6] = 4.71238898038469;
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      MathArrays.safeNorm(doubleArray0);
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 13;
      int int1 = (-2320);
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 13, (-2320));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[1] = (-4049.71F);
      floatArray0[2] = (-4049.71F);
      floatArray0[3] = 0.0F;
      floatArray0[5] = 3.4028235E38F;
      floatArray0[6] = 2842.353F;
      floatArray0[7] = 0.07701743F;
      floatArray0[8] = 0.0F;
      MathArrays.equals(floatArray0, floatArray0);
      MathArrays.linearCombination(0.0, (double) 2842.353F, (double) 2842.353F, (-322.4699), (double) 2842.353F, (double) 0.0F, (double) 0.0F, (-5025.2916));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) (-4049.71F);
      doubleArray0[2] = (-916573.2964922363);
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) 2842.353F;
      doubleArray0[5] = (double) 0.0F;
      doubleArray0[6] = 2842.35302734375;
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (double) (-4049.71F);
      doubleArray1[2] = (double) 0.0F;
      MathArrays.equals(doubleArray0, doubleArray1);
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(field0).getZero();
      MathArrays.buildArray(field0, 1788, 1788);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-233.682F);
      floatArray0[1] = (-4049.71F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[5] = 3.4028235E38F;
      floatArray0[6] = 2842.353F;
      floatArray0[7] = (-1.0F);
      floatArray0[8] = 0.0F;
      MathArrays.equals(floatArray0, floatArray0);
      MathArrays.linearCombination(0.0, (double) 2842.353F, (double) 2842.353F, (-322.4699), (double) 2842.353F, (double) 0.0F, (double) 0.0F, 267.8514566702768);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) (-4049.71F);
      doubleArray0[2] = (-916573.2964922363);
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) 2842.353F;
      doubleArray0[5] = (double) 0.0F;
      doubleArray0[6] = 2842.35302734375;
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 971.215447322;
      doubleArray1[2] = (double) (-233.682F);
      MathArrays.equals(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-233.682F);
      floatArray0[1] = (-4049.71F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[5] = 3.4028235E38F;
      floatArray0[6] = 2842.353F;
      floatArray0[7] = (-1.0F);
      floatArray0[8] = 0.0F;
      MathArrays.equals(floatArray0, floatArray0);
      MathArrays.linearCombination(0.0, (double) 2842.353F, (double) 2842.353F, (-322.4699), (double) 2842.353F, (double) 0.0F, (double) 0.0F, (-5025.2916));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) (-4049.71F);
      doubleArray0[2] = (-916573.2964922363);
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) 2842.353F;
      doubleArray0[5] = (double) 0.0F;
      doubleArray0[6] = 2842.35302734375;
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 971.215447322;
      doubleArray1[2] = (double) (-233.682F);
      MathArrays.equals(doubleArray0, doubleArray1);
      try { 
        MathArrays.linearCombination(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1525.49;
      doubleArray0[1] = 3.834E-20;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = 4448.42459698;
      doubleArray0[4] = (-160.72329346294106);
      doubleArray0[5] = (-626.19832623);
      MathArrays.distance1(doubleArray0, doubleArray0);
      int[] intArray0 = new int[4];
      intArray0[0] = 594;
      intArray0[1] = (-53);
      intArray0[2] = (-2145515284);
      intArray0[3] = 2146802112;
      int[] intArray1 = new int[8];
      intArray1[0] = (-2145515284);
      intArray1[1] = (-53);
      intArray1[2] = 594;
      intArray1[3] = 2146802112;
      intArray1[4] = (-53);
      intArray1[5] = 2146802112;
      intArray1[6] = 2146802112;
      intArray1[7] = (-53);
      MathArrays.distance1(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = 3.141592653589793;
      doubleArray0[2] = (-557.96);
      doubleArray0[3] = (-3149.9485838122005);
      doubleArray0[4] = 6.283185307179586;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = 1950.005113453077;
      doubleArray0[7] = 2771.4497344;
      doubleArray0[8] = 0.0;
      MathArrays.distance(doubleArray0, doubleArray0);
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      MathArrays.distance1(intArray0, intArray0);
      Double[] doubleArray1 = new Double[2];
      doubleArray1[0] = (Double) 1950.005113453077;
      doubleArray1[1] = (Double) 1950.005113453077;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
      MathArrays.distanceInf(intArray0, intArray0);
      MathArrays.safeNorm(doubleArray0);
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (double) doubleArray1[0];
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = 2771.4497344;
      MathArrays.copyOf(doubleArray2);
      MathArrays.checkOrder(doubleArray2, mathArrays_OrderDirection0, true, false);
      MathArrays.OrderDirection.values();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1921.249);
      doubleArray0[1] = (-1415.63351);
      doubleArray0[2] = 1855.4650741842406;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 10000);
      int[] intArray0 = new int[0];
      MathArrays.distanceInf(intArray0, intArray0);
      // Undeclared exception!
      MathArrays.ebeSubtract(doubleArray1, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.linearCombination((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = ", kl$xx7";
      stringArray0[2] = "$VALUES";
      stringArray0[3] = "a";
      stringArray0[4] = "org.apache.commons.math3.exception.MathIllegalArgumentException";
      stringArray0[5] = "6?4tfYZ/2E";
      stringArray0[6] = "@KDN//V+-";
      stringArray0[7] = ":lXA,8.j;'uML";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 2217.777167;
      doubleArray0[3] = 1280.82910024969;
      MathArrays.equals(doubleArray0, (double[]) null);
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.distance1((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-48.642687130417);
      doubleArray0[1] = 4674.489;
      doubleArray0[2] = (-2900.8089048315);
      doubleArray0[3] = 2072.447718657;
      doubleArray0[4] = (-3721.889862);
      MathArrays.distance1(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      int[] intArray0 = new int[0];
      MathArrays.distanceInf(intArray0, intArray0);
      MathArrays.OrderDirection.values();
      MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      MathArrays.normalizeArray(doubleArray0, 1.8307188599677033E-8);
      int[] intArray1 = new int[1];
      intArray1[0] = 0;
      // Undeclared exception!
      try { 
        MathArrays.distance(intArray1, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.safeNorm((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = 3.141592653589793;
      doubleArray0[2] = (-557.96);
      doubleArray0[3] = Double.POSITIVE_INFINITY;
      doubleArray0[4] = 6.283185307179586;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = 1950.005113453077;
      doubleArray0[7] = 2771.4497344;
      doubleArray0[8] = 0.0;
      MathArrays.distance(doubleArray0, doubleArray0);
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      MathArrays.distance1(intArray0, intArray0);
      Double[] doubleArray1 = new Double[2];
      doubleArray1[0] = (Double) 1950.005113453077;
      doubleArray1[1] = (Double) 1950.005113453077;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
      MathArrays.distanceInf(intArray0, intArray0);
      MathArrays.safeNorm(doubleArray0);
      MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[0] = 0.0;
      double double0 = (-2936.75951458055);
      doubleArray0[3] = (-2936.75951458055);
      doubleArray0[4] = 3.834E-20;
      doubleArray0[5] = 2.0;
      MathArrays.safeNorm(doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (0 <= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double[][] doubleArray0 = new double[2][9];
      int[] intArray0 = new int[2];
      intArray0[0] = 108;
      intArray0[1] = 1914;
      MathArrays.distance(intArray0, intArray0);
      MathArrays.linearCombination(0.0, 866.23, 0.0, (-71.6), 0.0, (-414.3166), (double) 1914, (-397.686781));
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-414.3166);
      doubleArray1[1] = (double) 108;
      doubleArray1[2] = (-397.686781);
      doubleArray1[3] = (-414.3166);
      doubleArray1[4] = (double) 108;
      MathArrays.scale((-3137.658526025981), doubleArray1);
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = (double) 1914;
      doubleArray2[1] = (double) 108;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 1778.0;
      doubleArray2[4] = 1778.0;
      doubleArray2[5] = (double) 108;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(doubleArray2, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 3020.0;
      doubleArray0[1] = 0.0;
      // Undeclared exception!
      try { 
        MathArrays.checkPositive((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 946;
      intArray0[1] = 2145386496;
      intArray0[2] = 527;
      MathArrays.distance1(intArray0, intArray0);
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 2145386496;
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (float) 946;
      floatArray0[3] = (float) 2145386496;
      MathArrays.equals(floatArray0, floatArray0);
      MathArrays.distance1(intArray0, intArray0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 2145386496;
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 527;
      doubleArray1[1] = 20.0;
      doubleArray1[2] = 2447.9;
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      MathArrays.linearCombination(1073.97, 740.5070277187, 740.5070277187, 1073.97, 1073.97, 1.7976931348623157E308);
      Integer[] integerArray0 = new Integer[6];
      int int0 = 1;
      Integer integer0 = new Integer(1);
      integerArray0[0] = integer0;
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 1;
      Integer.toUnsignedLong(1);
      longArray0[1] = (long) int0;
      longArray0[2] = (long) 1;
      longArray0[3] = (long) int0;
      longArray0[4] = (long) 1;
      longArray0[5] = (long) int0;
      longArray0[6] = (long) 1;
      longArray0[7] = (long) 1;
      longArray0[8] = (long) 1;
      MathArrays.checkNonNegative(longArray0);
      integerArray0[1] = (Integer) int0;
      Integer integer1 = new Integer(134217729);
      integerArray0[2] = integer1;
      Integer integer2 = new Integer((int) integerArray0[2]);
      integerArray0[3] = integer2;
      Integer integer3 = new Integer(2777);
      integerArray0[4] = integer3;
      Integer integer4 = new Integer(134217729);
      integerArray0[5] = integer4;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 937.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[3][5];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer((-1658));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(2146802112);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[1]);
      integerArray0[2] = integer2;
      int int0 = 2;
      Integer integer3 = new Integer(2);
      integerArray0[3] = integer3;
      Integer.getInteger("");
      Integer integer4 = new Integer(2);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((int) integerArray0[2]);
      integerArray0[5] = integer5;
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection1, true);
      int[] intArray0 = new int[6];
      intArray0[0] = 2;
      intArray0[1] = int0;
      intArray0[2] = 2;
      intArray0[3] = int0;
      intArray0[4] = (int) integerArray0[2];
      intArray0[5] = int0;
      MathArrays.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      MathArrays.equals((double[]) null, (double[]) null);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = ", kl$xx7";
      stringArray0[2] = "$VALUES";
      stringArray0[3] = "a";
      stringArray0[4] = "org.apache.commons.math3.exception.MathIllegalArgumentException";
      stringArray0[5] = "6?4tfYZ/2E";
      stringArray0[6] = "@KDN//V+-";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-233.682F);
      floatArray0[1] = (-4049.71F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 3.4028235E38F;
      floatArray0[6] = 2842.353F;
      floatArray0[7] = (-1.0F);
      floatArray0[8] = 0.0F;
      MathArrays.equals(floatArray0, floatArray0);
      MathArrays.linearCombination(0.0, (double) 2842.353F, (double) 2842.353F, (-322.4699), (double) 2842.353F, (double) 0.0F, (double) 0.0F, (-5025.2916));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) (-4049.71F);
      doubleArray0[2] = (-916573.2964922363);
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) 2842.353F;
      doubleArray0[5] = (double) 0.0F;
      doubleArray0[6] = (-916573.2964922363);
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 971.215447322;
      doubleArray1[2] = (double) (-233.682F);
      MathArrays.equals(doubleArray0, doubleArray1);
      try { 
        MathArrays.ebeMultiply(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 937.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[3][5];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      float[] floatArray0 = new float[0];
      MathArrays.equals((float[]) null, floatArray0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.5874010519681994;
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1.0F;
      MathArrays.equals((float[]) null, floatArray0);
  }


  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-233.682F);
      floatArray0[1] = (-4049.71F);
      floatArray0[1] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[5] = 3.4028235E38F;
      floatArray0[6] = 2842.353F;
      floatArray0[7] = (-1.0F);
      floatArray0[8] = 0.0F;
      MathArrays.equals(floatArray0, floatArray0);
      MathArrays.linearCombination(0.0, (double) 2842.353F, (double) 2842.353F, (-322.4699), (double) 2842.353F, (double) 0.0F, (double) 0.0F, (-5025.2916));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) (-4049.71F);
      doubleArray0[2] = (-916573.2964922363);
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) 2842.353F;
      doubleArray0[5] = (double) 0.0F;
      doubleArray0[6] = (-916573.2964922363);
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 971.215447322;
      doubleArray1[2] = (double) (-233.682F);
      MathArrays.equals(doubleArray0, doubleArray1);
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = (double) 2842.353F;
      doubleArray2[1] = (double) 0.0F;
      doubleArray2[2] = (double) 2842.353F;
      doubleArray2[3] = (-5025.2916);
      try { 
        MathArrays.ebeMultiply(doubleArray0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double(2676.58);
      doubleArray0[0] = double0;
      Double.min((-4158.0684371968), 2676.58);
      Double double1 = new Double(2676.58);
      doubleArray0[1] = double1;
      Double double2 = new Double((-1254.1911869329524));
      doubleArray0[2] = double2;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) doubleArray0[1];
      doubleArray1[1] = (double) doubleArray0[1];
      doubleArray1[2] = (double) doubleArray0[0];
      doubleArray1[3] = 2676.58;
      doubleArray1[4] = (double) doubleArray0[1];
      doubleArray1[5] = (double) doubleArray0[2];
      doubleArray1[6] = (-4158.0684371968);
      doubleArray1[7] = 1956.938157510519;
      MathArrays.equalsIncludingNaN(doubleArray1, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 152;
      intArray0[1] = 152;
      intArray0[1] = 4723;
      intArray0[3] = 0;
      intArray0[4] = 1949;
      intArray0[5] = 3958;
      MathArrays.copyOf(intArray0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.99;
      doubleArray0[1] = (double) 4723;
      doubleArray0[2] = (-2963.803950759);
      doubleArray0[3] = (double) 152;
      doubleArray0[4] = (double) 3958;
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 1949;
      longArray0[1] = (long) 1949;
      longArray0[2] = (long) 1949;
      longArray0[3] = (long) 1949;
      longArray0[4] = (long) 1200;
      longArray0[5] = (long) 4723;
      longArray0[6] = (long) 4723;
      MathArrays.checkNonNegative(longArray0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      float[] floatArray1 = new float[6];
      floatArray1[0] = 0.0F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = 0.0F;
      floatArray1[3] = 0.0F;
      floatArray1[4] = 0.0F;
      floatArray1[5] = 0.0F;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      long[][] longArray0 = new long[0][4];
      MathArrays.checkRectangular(longArray0);
      double[] doubleArray0 = new double[6];
      doubleArray0[4] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) 0.0F;
      doubleArray0[5] = (double) 0.0F;
      // Undeclared exception!
      try { 
        MathArrays.ebeAdd(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-1784.0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      MathArrays.equals(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-1784.0);
      doubleArray1[1] = (-1.0);
      MathArrays.copyOf(doubleArray1, 23);
      MathArrays.linearCombination(1849.5, 1849.5, 0.0, 0.0, 1849.5, (-1.0));
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn("\"QRJT").when(field0).getZero();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 23);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-1784.0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      MathArrays.equals(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-1784.0);
      doubleArray1[1] = (-1.0);
      MathArrays.copyOf(doubleArray1, 23);
      MathArrays.linearCombination(1849.5, 1849.5, 0.0, 0.0, 1849.5, (-1.0));
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      MathArrays.buildArray(field0, 23);
      MathArrays.copyOf(doubleArray0, 206);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      MathArrays.linearCombination(Double.NaN, Double.NaN, Double.NaN, Double.NaN);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 686.3154854626545;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = (-956.91855);
      doubleArray0[7] = Double.NaN;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 6.283185307179586);
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      MathArrays.buildArray(field0, 0, 0);
      MathArrays.convolve(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      long[][] longArray0 = new long[1][5];
      long[] longArray1 = new long[4];
      longArray1[0] = 0L;
      longArray1[1] = 0L;
      longArray1[2] = 1L;
      long long0 = 1L;
      longArray1[3] = 1L;
      longArray0[0] = longArray1;
      MathArrays.checkNonNegative(longArray0);
      Class<FieldElement> class0 = FieldElement.class;
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-180);
      doubleArray0[1] = (double) 1L;
      doubleArray0[2] = (double) (-180);
      doubleArray0[3] = 2.800552834259E-8;
      doubleArray0[4] = 1.5574076175689697;
      doubleArray0[5] = (double) 184;
      doubleArray0[6] = (double) (-180);
      doubleArray0[7] = (double) 184;
      MathArrays.scale(0L, doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-180), 184);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 3020.0;
      doubleArray0[1] = 0.0;
      Integer[] integerArray0 = null;
      float[] floatArray0 = new float[8];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 1.4E-45F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = Float.NaN;
      floatArray0[6] = (-420.351F);
      floatArray0[7] = (-965.0182F);
      MathArrays.equals(floatArray0, floatArray0);
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(intArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1301.9380224379588;
      doubleArray0[4] = 2344.93205643;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-2171.1257721);
      doubleArray0[7] = (-284.0);
      MathArrays.distance1(doubleArray0, doubleArray0);
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      MathArrays.buildArray(field0, 0);
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      MathArrays.scale(650.289545697081, doubleArray0);
      MathArrays.copyOf(doubleArray1, 0);
      MathArrays.ebeSubtract(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 919.1497512;
      doubleArray0[1] = 2237.05663;
      doubleArray0[2] = 0.8414709568023682;
      doubleArray0[3] = (-2081.075);
      doubleArray0[4] = (-2363.908585683763);
      doubleArray0[5] = (-2189.7327253018993);
      doubleArray0[6] = (-2284.279678271);
      doubleArray0[7] = (-331.765);
      doubleArray0[8] = 168.0;
      // Undeclared exception!
      try { 
        MathArrays.distance1((double[]) null, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-1337);
      intArray0[1] = (-902);
      intArray0[2] = 3279;
      intArray0[3] = 705;
      MathArrays.copyOf(intArray0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1337);
      doubleArray0[1] = (double) (-1337);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) (-1337);
      doubleArray1[1] = (double) (-902);
      // Undeclared exception!
      try { 
        MathArrays.distance(intArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      MathArrays.OrderDirection.values();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 6.283185307179586;
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      MathArrays.distance(doubleArray0, doubleArray0);
      Class<FieldElement> class0 = FieldElement.class;
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      int int0 = (-2051);
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-2051));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-4802.6);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2793.658;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 3.43558273;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1.304E19;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (-3.141592653589793);
      doubleArray0[8] = 501.666849;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not decreasing (0 < 3.436)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      MathArrays.OrderDirection.values();
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1044.0F);
      MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 1423.6292F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-339.69318F);
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = (-1.0F);
      MathArrays.equals(floatArray0, floatArray0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (-2324.11);
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (-2003.42758429958);
      doubleArray0[5] = (double) 0.0F;
      doubleArray0[6] = (double) 1423.6292F;
      doubleArray0[7] = (double) 1423.6292F;
      doubleArray0[8] = (double) (-1.0F);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.ebeSubtract((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 868.334691;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1753.8);
      doubleArray0[5] = 2288.77154;
      doubleArray0[6] = 3040.0;
      MathArrays.distance1(doubleArray0, doubleArray0);
      try { 
        MathArrays.normalizeArray(doubleArray0, Double.NEGATIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to an infinite value
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1771.59683083735;
      doubleArray0[3] = 401.0;
      doubleArray0[4] = 844.1145400283682;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-2969.081911719568);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[3][1];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray0, 0.0);
      MathArrays.OrderDirection.values();
      MathArrays.distance(doubleArray2, doubleArray0);
      MathArrays.distance(doubleArray0, doubleArray0);
      MathArrays.linearCombination(3512.82094801973, (-2969.081911719568), (-928.52593), (-3767.51), 0.0, (-928.52593));
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = (-1106);
      intArray0[0] = (-1106);
      int int1 = 764;
      intArray0[1] = 764;
      MathArrays.distance1(intArray0, intArray0);
      int[] intArray1 = null;
      // Undeclared exception!
      try { 
        MathArrays.distance1(intArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 2347.3634644482;
      doubleArray1[5] = 2894.59856776;
      doubleArray1[6] = (-2330.15723239895);
      doubleArray1[7] = 0.0;
      doubleArray1[8] = (-1993.0);
      try { 
        MathArrays.ebeAdd(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-3.141592653589793);
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      int[] intArray0 = new int[4];
      int int0 = (-1794);
      intArray0[0] = (-1794);
      int int1 = (-2557);
      intArray0[1] = (-2557);
      int int2 = 141;
      intArray0[2] = 141;
      int int3 = (-376);
      intArray0[3] = (-376);
      MathArrays.distance(intArray0, intArray0);
      MathArrays.linearCombination(0.0, 0.0, (double) (-1794), 0.0, 0.0, (-4950.5004154), (-499.3823), 0.0);
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = 3.834E-20;
      doubleArray0[0] = 3.834E-20;
      double double1 = 0.0;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      MathArrays.equals(doubleArray0, doubleArray0);
      MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      MathArrays.copyOf(doubleArray2);
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1598.19883);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-799.44);
      doubleArray0[5] = 0.0;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = (-799.44);
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 1147.01871651153;
      MathArrays.equalsIncludingNaN(doubleArray1, doubleArray2);
      MathArrays.linearCombination(0.0, 0.0, (-2406.3163369373124), -0.0);
      int[] intArray0 = new int[7];
      intArray0[0] = 1780;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 1174;
      intArray0[4] = (-1735);
      intArray0[5] = (-1);
      intArray0[6] = (-2048);
      MathArrays.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.34217729E8;
      doubleArray0[2] = 2499.19;
      doubleArray0[3] = Double.NEGATIVE_INFINITY;
      doubleArray0[4] = 1.34217729E8;
      doubleArray0[5] = (-2576.4449733876654);
      doubleArray0[6] = (-1739.0);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 1038);
      MathArrays.ebeDivide(doubleArray1, doubleArray1);
      int[] intArray0 = new int[4];
      intArray0[0] = 1038;
      intArray0[1] = 1038;
      intArray0[2] = (-2115);
      intArray0[3] = 1038;
      int[] intArray1 = new int[5];
      intArray1[0] = (-2115);
      intArray1[1] = 1038;
      intArray1[2] = 1038;
      intArray1[3] = 1038;
      intArray1[4] = (-2115);
      MathArrays.distanceInf(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = (-2303.0283);
      doubleArray0[2] = (-1493.3);
      double double0 = 1317.223096600034;
      doubleArray0[3] = 1317.223096600034;
      MathArrays.safeNorm(doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[5][3];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = (-1493.3);
      doubleArray2[1] = 1.304E19;
      doubleArray2[2] = 1.304E19;
      doubleArray2[3] = (-2303.0283);
      doubleArray2[4] = 1317.223096600034;
      doubleArray2[5] = (-1493.3);
      doubleArray2[6] = 1.304E19;
      doubleArray2[7] = 1317.223096600034;
      doubleArray2[8] = (-1493.3);
      doubleArray1[3] = doubleArray2;
      doubleArray1[4] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((String[]) null, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 90.95205423;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-3942.17571505263);
      doubleArray0[5] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      int[] intArray0 = new int[6];
      intArray0[0] = 220;
      intArray0[1] = 2;
      intArray0[2] = 0;
      intArray0[3] = (-1170);
      intArray0[4] = 0;
      intArray0[5] = 2;
      MathArrays.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-974.543);
      doubleArray0[1] = 2221.0;
      doubleArray0[2] = 2141.4993486343;
      doubleArray0[3] = 1582.0;
      doubleArray0[4] = (-1588.44807949994);
      doubleArray0[5] = 1231.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (-1.0);
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = 2221.0;
      doubleArray2[1] = 2141.4993486343;
      doubleArray2[2] = (-1.0);
      doubleArray2[3] = 2141.4993486343;
      doubleArray2[4] = 1582.0;
      doubleArray2[5] = 0.0;
      doubleArray2[6] = (-974.543);
      doubleArray2[7] = (-974.543);
      doubleArray2[8] = 1582.0;
      MathArrays.distance1(doubleArray1, doubleArray2);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 2;
      intArray0[2] = 0;
      intArray0[3] = 158;
      intArray0[4] = (-2414);
      intArray0[5] = 2287;
      intArray0[6] = 0;
      intArray0[7] = 134217729;
      MathArrays.copyOf(intArray0, 158);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-2414);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 158;
      doubleArray0[3] = (double) 2287;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) (-2414);
      doubleArray0[6] = (double) (-2414);
      doubleArray0[7] = Double.POSITIVE_INFINITY;
      doubleArray0[8] = (double) 0;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      try { 
        MathArrays.normalizeArray(doubleArray1, 2524.3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array contains an infinite element, -\u221E at index 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1810.5013451;
      doubleArray0[1] = (-3349.76412983612);
      doubleArray0[2] = (-94.4738919219107);
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(182);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(182);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[2]);
      integerArray0[3] = integer3;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 2;
      intArray0[1] = 58;
      intArray0[2] = 0;
      intArray0[3] = 1170;
      intArray0[4] = 923;
      intArray0[5] = 2800;
      intArray0[6] = (-2225);
      intArray0[7] = (-894);
      intArray0[8] = 0;
      int[] intArray1 = new int[6];
      intArray1[0] = 2800;
      intArray1[1] = 1057;
      intArray1[2] = 923;
      intArray1[3] = 0;
      intArray1[4] = 2;
      intArray1[5] = 0;
      // Undeclared exception!
      try { 
        MathArrays.distance(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-1337);
      intArray0[1] = (-902);
      intArray0[2] = 3279;
      intArray0[3] = 705;
      MathArrays.copyOf(intArray0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1337);
      doubleArray0[1] = (double) (-1337);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) (-1337);
      doubleArray1[1] = (double) (-902);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      int int0 = 5834;
      intArray0[1] = 5834;
      MathArrays.distance(intArray0, intArray0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int1 = (-3367);
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-3367), 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1352.8190293);
      doubleArray0[1] = 1.0;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = Double.NEGATIVE_INFINITY;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1.7976931348623157E308;
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,352.819 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1218.9509839814;
      doubleArray0[1] = 686.9715055;
      doubleArray0[2] = 232.30138477752;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 663.0;
      doubleArray0[6] = 50.98244600972451;
      doubleArray0[7] = 100.0;
      try { 
        MathArrays.normalizeArray(doubleArray0, Double.NaN);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to NaN
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.ebeDivide((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      MathArrays.OrderDirection.values();
      try { 
        MathArrays.checkRectangular((long[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((double[]) null, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double double0 = 0.0;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      MathArrays.scaleInPlace(0.0, doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double[] doubleArray0 = null;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, true, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1751.2;
      doubleArray0[1] = (-3.141592653589793);
      MathArrays.distance(doubleArray0, doubleArray0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "4{9AbSQg";
      stringArray0[1] = "";
      stringArray0[2] = "6TYk =n:IO";
      stringArray0[3] = "org.apache.commons.math3.util.MathArrays$2";
      stringArray0[4] = "org.apache.commons.math3.util.MathArrays";
      stringArray0[5] = "efG)";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-313.875796);
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-315.398);
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      long[][] longArray0 = new long[0][2];
      MathArrays.checkNonNegative(longArray0);
      double[] doubleArray0 = new double[0];
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      MathArrays.linearCombination(3.141592653589793, 3.834E-20, 3.834E-20, 3455.46702, 2560.4288455451, 3.141592653589793, 3.834E-20, 0.0);
      MathArrays.checkNonNegative(longArray0);
      MathArrays.checkPositive(doubleArray0);
      int[] intArray0 = new int[9];
      intArray0[0] = (-1830);
      intArray0[1] = (-1830);
      intArray0[2] = (-728);
      intArray0[3] = 1763;
      intArray0[4] = 2;
      intArray0[5] = 103;
      intArray0[6] = (-390);
      intArray0[7] = (-3231);
      intArray0[8] = 0;
      MathArrays.copyOf(intArray0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.checkPositive(doubleArray0);
      try { 
        MathArrays.convolve(doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      try { 
        MathArrays.convolve(doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray0 = new double[0][1];
      try { 
        MathArrays.sortInPlace((double[]) null, mathArrays_OrderDirection0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = Double.NaN;
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 1176.654639;
      double double1 = 1193.7765705;
      doubleArray0[2] = 1193.7765705;
      double double2 = 735.069466;
      doubleArray0[3] = 735.069466;
      MathArrays.equals(doubleArray0, doubleArray0);
      float[] floatArray0 = new float[3];
      float float0 = (-1.0F);
      floatArray0[0] = (-1.0F);
      float float1 = 1460.3806F;
      floatArray0[1] = 1460.3806F;
      floatArray0[2] = 1.0F;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      MathArrays.safeNorm(doubleArray0);
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 735.069466;
      doubleArray1[1] = (double) 1460.3806F;
      doubleArray1[2] = 735.069466;
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 134217729;
      intArray0[1] = 310;
      intArray0[2] = 3238;
      intArray0[3] = 306;
      intArray0[4] = 208;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 1676;
      MathArrays.distance1(intArray0, intArray0);
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 2399.78905573;
      doubleArray0[2] = (-994.4061301);
      doubleArray0[3] = 0.0;
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathArrays.scale(0.0, doubleArray0);
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = (-994.4061301);
      doubleArray2[1] = 2399.78905573;
      doubleArray2[2] = (-994.4061301);
      doubleArray2[3] = (-994.4061301);
      doubleArray2[4] = 2399.78905573;
      doubleArray2[5] = 0.0;
      doubleArray2[6] = (-994.4061301);
      try { 
        MathArrays.linearCombination(doubleArray2, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.5574076175689697;
      doubleArray0[1] = 1.63E18;
      doubleArray0[2] = (-1099.752496);
      doubleArray0[3] = 625.969555793;
      doubleArray0[4] = 0.7853981633974483;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = 20.0;
      MathArrays.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int[] intArray0 = new int[0];
      MathArrays.copyOf(intArray0);
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("3");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.3
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-2101.0);
      doubleArray0[1] = (-1940.7966667);
      doubleArray0[2] = 3.32;
      doubleArray0[3] = (-432.0301560261997);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-1940.7966667);
      doubleArray1[1] = (-1940.7966667);
      doubleArray1[2] = 3.32;
      doubleArray1[3] = Double.NEGATIVE_INFINITY;
      doubleArray1[4] = 0.61814498;
      MathArrays.linearCombination(doubleArray1, doubleArray1);
      int int0 = (-911);
      // Undeclared exception!
      try { 
        MathArrays.copyOf(doubleArray1, (-911));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      long[][] longArray0 = new long[9][0];
      long[] longArray1 = new long[5];
      longArray1[0] = 0L;
      longArray1[1] = 0L;
      longArray1[2] = 0L;
      longArray1[3] = (-1176L);
      longArray1[4] = 0L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[5];
      longArray2[0] = 0L;
      longArray2[1] = 0L;
      longArray2[2] = (-1176L);
      longArray2[3] = 0L;
      longArray2[4] = 0L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[3];
      longArray3[0] = 0L;
      longArray3[1] = 0L;
      longArray3[2] = 0L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[7];
      longArray4[0] = 0L;
      longArray4[1] = 0L;
      longArray4[2] = 0L;
      longArray4[3] = 0L;
      longArray4[4] = (-1176L);
      longArray4[5] = 0L;
      longArray4[6] = 0L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[1];
      longArray5[0] = 0L;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[0];
      longArray0[5] = longArray6;
      long[] longArray7 = new long[8];
      longArray7[0] = 0L;
      longArray7[1] = 0L;
      longArray7[2] = 0L;
      longArray7[3] = 0L;
      longArray7[4] = 0L;
      longArray7[5] = 0L;
      longArray7[6] = 0L;
      longArray7[7] = 0L;
      longArray0[6] = longArray7;
      long[] longArray8 = new long[1];
      longArray8[0] = (-1176L);
      longArray0[7] = longArray8;
      long[] longArray9 = new long[9];
      longArray9[0] = 0L;
      longArray9[1] = (-1176L);
      longArray9[2] = 0L;
      longArray9[3] = 0L;
      longArray9[4] = 0L;
      longArray9[5] = (-1176L);
      longArray9[6] = 0L;
      longArray9[7] = 0L;
      longArray9[8] = 0L;
      longArray0[8] = longArray9;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 3 while others have length 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 1.0F;
      floatArray0[1] = (-585.92194F);
      floatArray0[2] = (-1.0F);
      floatArray0[3] = (-1.0F);
      floatArray0[4] = (-1120.531F);
      floatArray0[5] = 0.0F;
      floatArray0[6] = (-2164.42F);
      float[] floatArray1 = new float[5];
      floatArray1[0] = (-1.0F);
      floatArray1[1] = 1.0F;
      floatArray1[2] = (-1.0F);
      floatArray1[3] = (-1.0F);
      floatArray1[4] = 1.0F;
      MathArrays.equals(floatArray0, floatArray1);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 469.3256343;
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathArrays.scale(0.0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      MathArrays.safeNorm(doubleArray1);
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray2 = new double[8][7];
      doubleArray2[0] = doubleArray1;
      doubleArray2[1] = doubleArray0;
      double[] doubleArray3 = new double[7];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = 469.3256343;
      doubleArray3[5] = 0.0;
      doubleArray3[6] = 0.0;
      doubleArray2[2] = doubleArray3;
      doubleArray2[3] = doubleArray0;
      doubleArray2[4] = doubleArray0;
      doubleArray2[5] = doubleArray0;
      doubleArray2[6] = doubleArray1;
      doubleArray2[7] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection1, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-974.921);
      doubleArray0[1] = (-1429.57);
      doubleArray0[2] = 536.784420552;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-3222.7906166952757);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      MathArrays.linearCombination(doubleArray0, doubleArray1);
      Integer[] integerArray0 = new Integer[4];
      int int0 = 2;
      Integer integer0 = new Integer(2);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(2);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(383);
      integerArray0[3] = integer3;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        Integer.parseUnsignedInt("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      double[] doubleArray1 = MathArrays.scale(0.0, doubleArray0);
      MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      MathArrays.ebeAdd(doubleArray1, doubleArray0);
      MathArrays.distanceInf(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.scale((-628.77), (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = 259;
      intArray0[0] = 259;
      int int1 = (-2080);
      intArray0[1] = (-2080);
      // Undeclared exception!
      try { 
        MathArrays.copyOf(intArray0, (-2080));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 20.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 548.5865653868541;
      doubleArray0[5] = (-217.162636695);
      doubleArray0[6] = 1041.941;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      MathArrays.scaleInPlace(0.0, doubleArray1);
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 1305);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1543.6381);
      doubleArray0[2] = 587.898;
      doubleArray0[3] = 625.969555793;
      doubleArray0[4] = 863.09369374;
      doubleArray0[5] = (-251.63972629722);
      doubleArray0[6] = (-3862.4346802);
      doubleArray0[7] = (-3071.07756);
      doubleArray0[8] = 1.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[0][6];
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      MathArrays.ebeDivide(doubleArray0, doubleArray0);
      MathArrays.safeNorm(doubleArray0);
      int int0 = (-1);
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<String>) null, (-1), (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int int0 = 0;
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Integer>) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 1470.951F;
      floatArray0[1] = 3.4028235E38F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-1.0F);
      floatArray0[5] = (-1.0F);
      floatArray0[6] = 414.0F;
      floatArray0[7] = (-1891.0F);
      floatArray0[8] = (-1.0F);
      float[] floatArray1 = new float[0];
      MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double[] doubleArray0 = null;
      try { 
        MathArrays.convolve((double[]) null, (double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      float[] floatArray1 = new float[6];
      floatArray1[0] = 0.0F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = 0.0F;
      floatArray1[3] = 0.0F;
      floatArray1[4] = 0.0F;
      floatArray1[5] = 0.0F;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      long[][] longArray0 = new long[0][4];
      MathArrays.checkRectangular(longArray0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) 0.0F;
      doubleArray0[5] = (double) 0.0F;
      MathArrays.ebeAdd(doubleArray0, doubleArray0);
      MathArrays.scale(0.0, doubleArray0);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 0.0F;
      doubleArray1[1] = (double) 0.0F;
      try { 
        MathArrays.ebeDivide(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-3.141592653589793);
      doubleArray0[2] = Double.NEGATIVE_INFINITY;
      doubleArray0[3] = 313.7582;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = (-2329.0);
      doubleArray0[7] = 0.0;
      doubleArray0[8] = (-1219.3573624);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not increasing (0 > -3.142)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-753.819585930443);
      doubleArray0[1] = (-753.819585930443);
      doubleArray0[2] = (-753.819585930443);
      doubleArray0[3] = (-753.819585930443);
      doubleArray0[4] = (-753.819585930443);
      doubleArray0[5] = (-753.819585930443);
      doubleArray0[6] = (-753.819585930443);
      doubleArray0[7] = (-753.819585930443);
      double[] doubleArray1 = MathArrays.scale((-753.819585930443), doubleArray0);
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      MathArrays.linearCombination((-753.819585930443), (-753.819585930443), 1.0E-5, 0.0, (-753.819585930443), (-753.819585930443));
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray0, doubleArray1);
      double[] doubleArray3 = new double[0];
      try { 
        MathArrays.ebeSubtract(doubleArray2, doubleArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1261.164440808;
      doubleArray0[1] = 1.34217729E8;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray2 = new double[3][7];
      doubleArray2[0] = doubleArray0;
      doubleArray2[1] = doubleArray0;
      doubleArray2[2] = doubleArray1;
      MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, doubleArray2);
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection1, false, false);
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = 1261.164440808;
      doubleArray3[1] = 1.34217729E8;
      doubleArray3[2] = 1.34217729E8;
      MathArrays.equals(doubleArray3, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.7976931348623157E308;
      MathArrays.checkOrder(doubleArray0);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      MathArrays.linearCombination(1.7976931348623157E308, 0.0, 1.7976931348623157E308, 1.7976931348623157E308);
      float[] floatArray0 = new float[8];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-1.0F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = 1664.4F;
      float[] floatArray1 = new float[5];
      floatArray1[0] = 0.0F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = 0.0F;
      floatArray1[3] = 0.0F;
      floatArray1[4] = 1596.5515F;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      MathArrays.linearCombination(1349.213961571, 1349.213961571, 0.0, Double.NaN, 0.0, Double.NaN);
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double(0.0);
      doubleArray0[0] = double0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = Double.NaN;
      doubleArray1[1] = (-1244.183692974);
      doubleArray1[2] = Double.NaN;
      doubleArray1[3] = 1349.213961571;
      doubleArray1[4] = (double) doubleArray0[0];
      doubleArray1[5] = Double.NaN;
      doubleArray1[6] = Double.NaN;
      doubleArray1[7] = Double.NaN;
      doubleArray1[8] = 1349.213961571;
      MathArrays.copyOf(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.copyOf(doubleArray0);
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 3046;
      intArray0[2] = 0;
      intArray0[3] = (-761);
      intArray0[4] = (-3850);
      intArray0[5] = 217;
      intArray0[6] = 2;
      MathArrays.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      MathArrays.linearCombination((-509.628), (-437.725172518), (-509.628), (-509.628), (-509.628), (-437.725172518), (-851.845), (-851.845));
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 3734;
      intArray0[2] = 0;
      intArray0[3] = 799;
      intArray0[4] = 0;
      intArray0[5] = (-1675);
      intArray0[6] = (-777);
      intArray0[7] = 0;
      MathArrays.distance(intArray0, intArray0);
      MathArrays.ebeDivide(doubleArray0, doubleArray1);
      MathArrays.distanceInf(intArray0, intArray0);
      MathArrays.copyOf(intArray0, 0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 2947.73;
      doubleArray0[4] = 100.0;
      MathArrays.copyOf(doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[1][4];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double double0 = (-3553.681082528707);
      double double1 = (-1.0);
      MathArrays.linearCombination((-3553.681082528707), (-3553.681082528707), (-1.0), (-1.0));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.2628650236322403E7;
      doubleArray0[1] = 1.2628650236322403E7;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-1.0);
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not increasing (12,628,650.236 > -1)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      MathArrays.equals((float[]) null, (float[]) null);
      long[][] longArray0 = new long[5][8];
      long[] longArray1 = new long[6];
      longArray1[0] = 1036L;
      longArray1[1] = 0L;
      longArray1[2] = 0L;
      longArray1[3] = (-1L);
      longArray1[4] = 0L;
      longArray1[5] = 0L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[4];
      longArray2[0] = 0L;
      longArray2[1] = 0L;
      longArray2[2] = (-1L);
      longArray2[3] = 0L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[1];
      longArray3[0] = 0L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[7];
      longArray4[0] = 0L;
      longArray4[1] = 0L;
      longArray4[2] = 1036L;
      longArray4[3] = (-1L);
      longArray4[4] = 0L;
      longArray4[5] = 0L;
      longArray4[6] = (-1L);
      longArray0[3] = longArray4;
      long[] longArray5 = new long[1];
      longArray5[0] = 0L;
      longArray0[4] = longArray5;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 4 while others have length 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = 223.19672077173755;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-546.6298);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 3121.56971;
      doubleArray0[6] = 6.283185307179586;
      doubleArray0[7] = (-484.647118);
      double[] doubleArray1 = new double[0];
      try { 
        MathArrays.ebeAdd(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.distance1(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2746.584748284607;
      doubleArray0[1] = (-2061.3883);
      double[][] doubleArray1 = new double[5][7];
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = 2746.584748284607;
      doubleArray2[1] = 2746.584748284607;
      doubleArray2[2] = (-2061.3883);
      doubleArray1[0] = doubleArray2;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 0.0;
      double[] doubleArray1 = new double[0];
      try { 
        MathArrays.ebeAdd(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      MathArrays.equals((float[]) null, (float[]) null);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-3588.361421281);
      doubleArray0[1] = 520.8;
      doubleArray0[2] = 1.7976931348623157E308;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1.34217729E8;
      double[][] doubleArray1 = new double[9][7];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = 0.0;
      doubleArray1[2] = doubleArray2;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      doubleArray1[8] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.34217729E8;
      doubleArray0[1] = 1.34217729E8;
      doubleArray0[2] = 1.34217729E8;
      doubleArray0[3] = 1.34217729E8;
      doubleArray0[4] = 1.34217729E8;
      double[] doubleArray1 = MathArrays.scale(1.34217729E8, doubleArray0);
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray0, doubleArray1);
      double[] doubleArray3 = MathArrays.ebeSubtract(doubleArray1, doubleArray2);
      int[] intArray0 = new int[1];
      intArray0[0] = (-2137);
      MathArrays.distance1(intArray0, intArray0);
      MathArrays.equals(doubleArray0, doubleArray3);
      MathArrays.OrderDirection.values();
      double[] doubleArray4 = MathArrays.ebeSubtract(doubleArray3, doubleArray2);
      MathArrays.safeNorm(doubleArray4);
      MathArrays.normalizeArray(doubleArray2, 0.0);
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) (-2137);
      floatArray0[3] = (float) (-2137);
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) (-2137);
      floatArray0[6] = (float) 0;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 979.9;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-3137.658526025981);
      doubleArray0[3] = (-164.2);
      doubleArray0[4] = 1778.0;
      doubleArray0[5] = (-71.6);
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1);
      double[][] doubleArray3 = new double[2][9];
      doubleArray3[0] = doubleArray2;
      doubleArray3[1] = doubleArray0;
      MathArrays.sortInPlace(doubleArray2, doubleArray3);
      int[] intArray0 = new int[2];
      intArray0[0] = 108;
      intArray0[1] = 1914;
      MathArrays.distance(intArray0, intArray0);
      MathArrays.copyOf(doubleArray0);
      MathArrays.linearCombination(0.0, 866.23, 0.0, (-71.6), 0.0, (-414.3166), (double) 1914, (-397.686781));
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-233.682F);
      floatArray0[1] = (-4049.71F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 2842.353F;
      floatArray0[7] = (-1.0F);
      floatArray0[8] = 0.0F;
      MathArrays.equals(floatArray0, floatArray0);
      MathArrays.linearCombination(0.0, (double) 2842.353F, (double) 2842.353F, (-322.4699), (double) 2842.353F, (double) (-4049.71F), (double) 0.0F, (-5025.2916));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 971.215447322;
      doubleArray0[2] = (double) (-233.682F);
      MathArrays.equals(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 2751;
      intArray0[2] = 3162;
      MathArrays.distance(intArray0, intArray0);
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 3162;
      floatArray0[1] = (float) 2751;
      floatArray0[2] = (float) 3162;
      floatArray0[3] = (float) 3162;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 3162;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      long[][] longArray0 = new long[0][6];
      MathArrays.checkRectangular(longArray0);
      MathArrays.linearCombination((-2280.469984), 957.43, 3146.9989, (double) 0);
      int[] intArray1 = new int[7];
      intArray1[0] = 3162;
      intArray1[1] = 0;
      intArray1[2] = 3162;
      intArray1[3] = 3162;
      intArray1[4] = 2751;
      intArray1[5] = 0;
      intArray1[6] = 3162;
      // Undeclared exception!
      try { 
        MathArrays.distance1(intArray1, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-627.0);
      doubleArray0[1] = 4954.42265562;
      doubleArray0[2] = 2533.1756637;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-20.0);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 127.146448978282;
      doubleArray0[7] = (-3600.534588504005);
      doubleArray0[8] = 1.7976931348623157E308;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      MathArrays.distanceInf(doubleArray0, doubleArray1);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray2 = new double[8][0];
      doubleArray2[0] = doubleArray0;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = 4954.42265562;
      doubleArray3[1] = 2533.1756637;
      doubleArray2[1] = doubleArray3;
      doubleArray2[2] = doubleArray1;
      doubleArray2[3] = doubleArray0;
      doubleArray2[4] = doubleArray0;
      double[] doubleArray4 = new double[0];
      doubleArray2[5] = doubleArray4;
      doubleArray2[6] = doubleArray1;
      doubleArray2[7] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      double[] doubleArray0 = null;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      float[] floatArray0 = new float[0];
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.ebeMultiply((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      MathArrays.OrderDirection.values();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1974.0053180104342;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 3.834E-20;
      doubleArray0[5] = 655.1;
      doubleArray0[6] = Double.NaN;
      MathArrays.ebeMultiply(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-100.27);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1504.318;
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-654.31973);
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      double[][] doubleArray2 = new double[2][2];
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = (-654.31973);
      doubleArray3[1] = 1.34217729E8;
      doubleArray3[2] = (-654.31973);
      doubleArray3[3] = (-654.31973);
      doubleArray2[0] = doubleArray3;
      doubleArray2[1] = doubleArray1;
      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2655.7812);
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      // Undeclared exception!
      try { 
        MathArrays.ebeMultiply(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      MathArrays.linearCombination((-837.859408), (-837.859408), 6.283185307179586, (-3743.0920782), 0.0, (-934.8379932234276), (-638.0), Double.POSITIVE_INFINITY);
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = (-1560);
      intArray0[2] = 0;
      intArray0[3] = (-1578);
      intArray0[4] = 49;
      MathArrays.distance(intArray0, intArray0);
      MathArrays.linearCombination((double) 0, 0.0, 2.0, 2.0, 0.0, (-5426.0));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) (-1560);
      double[][] doubleArray1 = new double[8][3];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.34217729E8;
      doubleArray0[1] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[8][4];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection1, false);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-1177);
      intArray0[1] = (-1270);
      intArray0[2] = 256;
      intArray0[3] = (-4691);
      MathArrays.distance(intArray0, intArray0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1177);
      doubleArray0[1] = (double) (-1177);
      doubleArray0[2] = (double) (-4691);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-4691));
      MathArrays.normalizeArray(doubleArray1, 1291.77038);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1723.38920722111;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      MathArrays.equals(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      MathArrays.equals(doubleArray1, doubleArray1);
      Double[] doubleArray2 = new Double[2];
      doubleArray2[0] = (Double) 1723.38920722111;
      doubleArray2[1] = (Double) 0.0;
      MathArrays.isMonotonic(doubleArray2, mathArrays_OrderDirection0, true);
      MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false, true);
      MathArrays.equals(doubleArray1, doubleArray1);
      // Undeclared exception!
      try { 
        MathArrays.distance(doubleArray1, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      long[][] longArray0 = new long[1][2];
      long[] longArray1 = new long[1];
      longArray1[0] = 1L;
      longArray0[0] = longArray1;
      MathArrays.checkRectangular(longArray0);
      double[] doubleArray0 = new double[0];
      MathArrays.scale(1L, doubleArray0);
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = (-2113);
      intArray0[2] = 2160;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      MathArrays.copyOf(intArray0, 2);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      MathArrays.linearCombination(Double.NaN, Double.NaN, 0.0, 0.0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 686.3154854626545;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = (-956.91855);
      doubleArray0[7] = Double.NaN;
      MathArrays.normalizeArray(doubleArray0, 6.283185307179586);
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1702.948);
      doubleArray0[1] = 2411.3390818777607;
      doubleArray0[2] = Double.NaN;
      MathArrays.distance1(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      MathArrays.copyOf(doubleArray1, 0);
      long[][] longArray0 = new long[6][4];
      long[] longArray1 = new long[3];
      longArray1[0] = (long) 0;
      longArray1[1] = (long) 0;
      longArray1[2] = (long) 0;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[7];
      longArray2[0] = (long) 0;
      longArray2[1] = (long) 0;
      longArray2[2] = (long) 0;
      longArray2[3] = (long) 0;
      longArray2[4] = (long) 0;
      longArray2[5] = (long) 0;
      longArray2[6] = (long) 0;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[6];
      longArray3[0] = (long) 0;
      longArray3[1] = (long) 0;
      longArray3[2] = (long) 0;
      longArray3[3] = (long) 0;
      longArray3[4] = (long) 0;
      longArray3[5] = (long) 0;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[3];
      longArray4[0] = (long) 0;
      longArray4[1] = (long) 0;
      longArray4[2] = (long) 0;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[0];
      longArray0[4] = longArray5;
      long[] longArray6 = new long[7];
      longArray6[0] = (long) 0;
      longArray6[1] = (long) 0;
      longArray6[2] = (long) 0;
      longArray6[3] = (long) 0;
      longArray6[4] = (long) 0;
      longArray6[5] = (long) 0;
      longArray6[6] = (long) 0;
      longArray0[5] = longArray6;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 7 while others have length 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      double double0 = 2511.2;
      double double1 = (-1084.0);
      MathArrays.linearCombination(2511.2, 2511.2, (-20.0), 2511.2, (-1084.0), 2511.2);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1084.0);
      doubleArray0[1] = 2511.2;
      doubleArray0[2] = (-20.0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (-1,084 <= 2,511.2)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-358.8706291422213);
      doubleArray0[2] = 987.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-2615.5382);
      doubleArray0[6] = (-3189.514911086546);
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      long[][] longArray0 = new long[2][0];
      long[] longArray1 = new long[5];
      longArray1[0] = (-1173L);
      longArray1[1] = (-9223372036854775808L);
      longArray1[2] = (-2841L);
      longArray1[3] = 0L;
      longArray1[4] = 1L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[6];
      longArray2[0] = 1L;
      longArray2[1] = (-1173L);
      longArray2[2] = 1L;
      longArray2[3] = (-1279L);
      longArray2[4] = (-9223372036854775808L);
      longArray2[5] = 0L;
      longArray0[1] = longArray2;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 6 while others have length 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      long[][] longArray0 = new long[1][9];
      long[] longArray1 = new long[6];
      longArray1[0] = (-1998L);
      longArray1[1] = (-1827L);
      longArray1[2] = 9007199254740990L;
      longArray1[3] = 0L;
      longArray1[4] = (-1L);
      longArray1[5] = 0L;
      longArray0[0] = longArray1;
      MathArrays.checkRectangular(longArray0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      try { 
        MathArrays.checkRectangular((long[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = Double.NaN;
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[0];
      // Undeclared exception!
      try { 
        MathArrays.distance1(doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      MathArrays.linearCombination((-1313.8133380390846), 1318.16340873, 1318.16340873, 0.0);
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = (-2271);
      intArray0[2] = (-551);
      intArray0[3] = (-1426);
      intArray0[4] = 0;
      intArray0[5] = 460;
      intArray0[6] = 0;
      intArray0[7] = 177;
      MathArrays.copyOf(intArray0);
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-3820.204F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-1402.0294F);
      floatArray0[3] = (-1084.937F);
      floatArray0[4] = 392.0F;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) (-1084.937F);
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) 0.0F;
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) (-1084.937F);
      doubleArray1[1] = (double) (-1084.937F);
      doubleArray1[2] = (double) (-3820.204F);
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (double) 0.0F;
      doubleArray1[5] = (double) (-1402.0294F);
      doubleArray1[6] = (double) (-1402.0294F);
      doubleArray1[7] = (double) (-3820.204F);
      MathArrays.distanceInf(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1753.894893843308);
      doubleArray0[3] = 1803.611189;
      doubleArray0[4] = (-2562.298563776368);
      doubleArray0[5] = 1315.7;
      doubleArray0[6] = (-1803.771);
      MathArrays.distanceInf(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 1816;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 1816, 1816);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      long[] longArray0 = new long[2];
      long long0 = 2799L;
      longArray0[0] = 2799L;
      longArray0[1] = (-1137L);
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,137 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.distance((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 762;
      intArray0[4] = 3544;
      intArray0[5] = 2080;
      MathArrays.distanceInf(intArray0, intArray0);
      MathArrays.distance1(intArray0, intArray0);
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null, 1184);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2656.3843081268524;
      doubleArray0[1] = 2.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-724.865);
      doubleArray0[4] = 3264.189;
      MathArrays.equals(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      MathArrays.safeNorm(doubleArray0);
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (2,656.384 >= 2)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-2873.6906575129);
      doubleArray0[2] = (-1784.024235159221);
      doubleArray0[3] = (-1805.37058678549);
      doubleArray0[4] = (-20.0);
      doubleArray0[5] = (-2757.1895048307892);
      doubleArray0[6] = 6.283185307179586;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = true;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      int int0 = 2859;
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Pair<String, String>>) null, 2859, 2859);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-127.0F);
      floatArray0[3] = (-2026.0F);
      floatArray0[4] = (-4181.791F);
      floatArray0[5] = 2733.003F;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = 1L;
      longArray0[1] = 1857L;
      longArray0[2] = 0L;
      longArray0[3] = 1096L;
      longArray0[4] = (-2789L);
      longArray0[5] = 0L;
      longArray0[6] = 0L;
      longArray0[7] = 0L;
      longArray0[8] = (-2622L);
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2,789 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-2966.173344);
      doubleArray0[4] = 3.834E-20;
      doubleArray0[5] = 2.0;
      MathArrays.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = -0.0;
      doubleArray0[1] = 3248.324691;
      doubleArray0[2] = (-2366.31739076219);
      doubleArray0[3] = 905.7;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-1018.9958861295794);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (-0 <= 3,248.325)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-618.8850200219096);
      doubleArray0[2] = 1715.31689;
      doubleArray0[3] = (-79.09621098281738);
      doubleArray0[4] = (-3.141592653589793);
      doubleArray0[5] = (-1104.0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.distance1(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 1890;
      intArray0[1] = 166;
      intArray0[2] = (-3506);
      intArray0[3] = 2922;
      intArray0[4] = (-1348);
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 2973;
      intArray0[8] = 0;
      MathArrays.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 164;
      intArray0[1] = (-1915);
      intArray0[2] = (-1682);
      intArray0[3] = (-354);
      intArray0[4] = 144;
      intArray0[6] = 0;
      MathArrays.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      int[] intArray0 = new int[0];
      MathArrays.distance1(intArray0, intArray0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      MathArrays.copyOf(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      MathArrays.linearCombination(63.18925438, 1.0, 1.0, (-3.141592653589793), (-1.0), 0.0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2.0;
      doubleArray0[1] = (-3.141592653589793);
      doubleArray0[2] = 60.04766172641021;
      MathArrays.copyOf(doubleArray0, 215);
      long[][] longArray0 = new long[4][5];
      long[] longArray1 = new long[9];
      longArray1[0] = (long) 215;
      longArray1[1] = (long) 215;
      longArray1[2] = (long) 215;
      longArray1[3] = (long) 215;
      longArray1[4] = (long) 215;
      longArray1[5] = (long) 215;
      longArray1[6] = 0L;
      longArray1[7] = (long) 215;
      longArray1[8] = (long) 215;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[5];
      longArray2[0] = 0L;
      longArray2[1] = 0L;
      longArray2[2] = (long) 215;
      longArray2[3] = (-623L);
      longArray2[4] = 0L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[1];
      longArray3[0] = (long) 215;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[8];
      longArray4[0] = (long) 215;
      longArray4[1] = (long) 215;
      longArray4[2] = 0L;
      longArray4[3] = (long) 215;
      longArray4[4] = (-623L);
      longArray4[5] = 0L;
      longArray4[6] = (long) 215;
      longArray4[7] = (-623L);
      longArray0[3] = longArray4;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -623 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 2217.777167;
      doubleArray0[2] = (-298.323479676113);
      doubleArray0[3] = 1280.82910024969;
      MathArrays.equals(doubleArray0, doubleArray0);
      MathArrays.linearCombination(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-635.630112508);
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-1553.0F);
      MathArrays.equals(floatArray0, floatArray0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      MathArrays.linearCombination((-1235.41866241303), (-1235.41866241303), (-1235.41866241303), (-1235.41866241303), (-1235.41866241303), (-1235.41866241303));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1235.41866241303);
      doubleArray0[1] = (-1235.41866241303);
      doubleArray0[2] = (-1235.41866241303);
      doubleArray0[3] = (-1235.41866241303);
      doubleArray0[4] = (-1235.41866241303);
      doubleArray0[5] = (-1235.41866241303);
      doubleArray0[6] = (-1235.41866241303);
      double[][] doubleArrayArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      long[][] longArray0 = new long[3][1];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[4];
      longArray2[0] = 1518L;
      longArray2[1] = 0L;
      longArray2[2] = (-507L);
      longArray2[3] = (-1L);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[2];
      longArray3[0] = (-507L);
      longArray3[1] = (-507L);
      longArray0[2] = longArray3;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -507 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-855.755);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "org.apache.commons.math3.util.Decimal64";
      stringArray0[1] = "";
      stringArray0[2] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection1, true);
      MathArrays.linearCombination(Double.NaN, (-855.755), 20.0, (-855.755));
      MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection2 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection2, false);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      MathArrays.OrderDirection.values();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "5}";
      stringArray0[2] = "";
      stringArray0[3] = "org.apache.commons.math3.util.MathArrays$2";
      stringArray0[4] = "S0l=8Zz";
      stringArray0[5] = "INCREASING";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      MathArrays.distance(doubleArray1, doubleArray1);
      MathArrays.distance1(doubleArray0, doubleArray1);
      MathArrays.safeNorm(doubleArray1);
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray2 = new double[3][0];
      doubleArray2[0] = doubleArray0;
      doubleArray2[1] = doubleArray1;
      doubleArray2[2] = doubleArray1;
      MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection1, doubleArray2);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      MathArrays.OrderDirection.values();
      MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      MathArrays.ebeSubtract(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      MathArrays.copyOf(doubleArray0, 0);
      try { 
        MathArrays.normalizeArray(doubleArray0, 2.0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-901.60246119);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      MathArrays.convolve(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 202.0;
      doubleArray0[1] = 202.0;
      doubleArray0[2] = (-2005.874945627);
      doubleArray0[3] = 604.3128111436902;
      doubleArray0[4] = 202.0;
      doubleArray0[5] = 202.0;
      MathArrays.scaleInPlace(202.0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.scaleInPlace(2732.4381648838616, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-365.245773);
      doubleArray0[1] = (-706.898);
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (-365.246 >= -706.898)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2562.0771210024072;
      doubleArray0[1] = 100.0;
      doubleArray0[2] = 0.0;
      MathArrays.copyOf(doubleArray0, 0);
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 0.0;
      try { 
        MathArrays.normalizeArray(doubleArray1, (-82.28118416348));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 20.0;
      doubleArray0[1] = 0.0;
      MathArrays.copyOf(doubleArray0, 0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1839.797;
      doubleArray0[1] = 849.58;
      doubleArray0[2] = 609.83035819201;
      MathArrays.distanceInf(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      MathArrays.linearCombination((-840.52507574), (-840.52507574), (-1461.221), (-2322.59), (-2322.59), (-1461.221), (-840.52507574), (-2322.59));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 9446312.1033907;
      doubleArray0[1] = (-1461.221);
      MathArrays.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 123.450312;
      doubleArray0[1] = (-2112.2468);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 2644.59976466303;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 922.7105143;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 922.7105143);
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (-2112.2468);
      doubleArray2[1] = 0.0;
      doubleArray2[2] = (-2112.2468);
      doubleArray2[3] = 922.7105143;
      doubleArray2[4] = 0.0;
      try { 
        MathArrays.ebeDivide(doubleArray1, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.ebeDivide((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 304L;
      long long0 = 1379L;
      longArray0[1] = 1379L;
      MathArrays.checkNonNegative(longArray0);
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.distance((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      MathArrays.OrderDirection.values();
      MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = (-1131);
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-1131));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = ",#I7'rl*v IWc$";
      stringArray0[1] = "";
      stringArray0[2] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      float[] floatArray0 = new float[0];
      MathArrays.equals(floatArray0, floatArray0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3611.123863;
      MathArrays.scaleInPlace(3611.123863, doubleArray0);
      long[] longArray0 = new long[8];
      longArray0[0] = (-1L);
      longArray0[1] = 2097L;
      longArray0[2] = 0L;
      longArray0[3] = 11L;
      longArray0[4] = 368L;
      longArray0[5] = 1023L;
      longArray0[6] = 4294967295L;
      longArray0[7] = (-1119L);
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      double[] doubleArray0 = null;
      MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = ", kl$xx7";
      stringArray0[2] = "$VALUES";
      stringArray0[3] = "a";
      stringArray0[4] = "org.apache.commons.math3.exception.MathIllegalArgumentException";
      stringArray0[5] = "6?4tfYZ/2E";
      stringArray0[6] = "@KDN//V+-";
      stringArray0[7] = ":lXA,8.j;'uML";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      MathArrays.equals((double[]) null, (double[]) null);
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection1, false, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 1176.654639;
      doubleArray0[2] = 1193.7765705;
      MathArrays.equals(doubleArray0, doubleArray0);
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 1460.3806F;
      floatArray0[2] = 1.0F;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      MathArrays.safeNorm(doubleArray0);
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 735.069466;
      doubleArray1[1] = (double) 1460.3806F;
      doubleArray1[2] = 735.069466;
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.34217729E8;
      doubleArray0[1] = 1.34217729E8;
      MathArrays.ebeDivide(doubleArray0, doubleArray0);
      long[][] longArray0 = new long[3][3];
      long[] longArray1 = new long[6];
      longArray1[0] = 7742L;
      longArray1[1] = 1235L;
      longArray1[2] = 389L;
      longArray1[3] = 2147483648L;
      longArray1[4] = (-2011L);
      longArray1[5] = (-1128L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[6];
      longArray2[0] = (-2011L);
      longArray2[1] = 7742L;
      longArray2[2] = 2147483648L;
      longArray2[3] = (-996L);
      longArray2[4] = 389L;
      longArray2[5] = 389L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[7];
      longArray3[1] = 7742L;
      longArray3[2] = 7742L;
      longArray3[3] = (-996L);
      longArray3[4] = 389L;
      longArray3[5] = 7742L;
      longArray3[6] = (-2011L);
      longArray0[2] = longArray3;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2,011 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 837.8;
      doubleArray0[1] = 1.5;
      doubleArray0[2] = 383.0;
      doubleArray0[3] = (-5.7618793749770706E-8);
      doubleArray0[4] = 2.17333333333333325E18;
      doubleArray0[5] = (-1560.5141146);
      doubleArray0[6] = (-3672.6496069607224);
      doubleArray0[7] = 20.0;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 383.0);
      MathArrays.equalsIncludingNaN(doubleArray1, doubleArray1);
      MathArrays.ebeMultiply(doubleArray1, doubleArray0);
      long[][] longArray0 = new long[4][0];
      long[] longArray1 = new long[4];
      longArray1[0] = 111L;
      longArray1[1] = 1023L;
      longArray1[2] = (-1090L);
      longArray1[3] = 0L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[4];
      longArray2[0] = 9007199254740990L;
      longArray2[1] = 1023L;
      longArray2[2] = 111L;
      longArray2[3] = 0L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[0];
      longArray0[2] = longArray3;
      long[] longArray4 = new long[6];
      longArray4[0] = 0L;
      longArray4[1] = (-2649L);
      longArray4[2] = 9007199254740990L;
      longArray4[3] = 111L;
      longArray4[4] = 0L;
      longArray4[5] = 9007199254740990L;
      longArray0[3] = longArray4;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,090 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 7.848361555046424E-8;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 4418.22823293839;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-3.141592653589793);
      doubleArray0[5] = (-1996.0279972833673);
      doubleArray0[6] = 1.7976931348623157E308;
      MathArrays.normalizeArray(doubleArray0, 7.848361555046424E-8);
      int[] intArray0 = new int[7];
      intArray0[0] = 1581;
      intArray0[1] = 11;
      intArray0[2] = 134217729;
      intArray0[3] = 389;
      intArray0[4] = 1581;
      intArray0[5] = 8;
      intArray0[6] = (-1216);
      MathArrays.copyOf(intArray0);
      long[][] longArray0 = new long[8][8];
      long[] longArray1 = new long[4];
      longArray1[0] = (long) 389;
      longArray1[1] = (long) 1581;
      longArray1[2] = (long) 11;
      longArray1[3] = (long) 1581;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[0];
      long[] longArray3 = new long[0];
      longArray0[2] = longArray3;
      long[] longArray4 = new long[8];
      longArray4[0] = (-574L);
      longArray4[1] = (long) 389;
      longArray4[2] = 9007199254740990L;
      longArray4[3] = (long) 11;
      longArray4[4] = (long) 8;
      longArray4[5] = (long) 389;
      longArray4[6] = (long) 1581;
      longArray4[7] = (long) 389;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[3];
      longArray5[0] = (long) 8;
      longArray5[1] = (long) 11;
      longArray5[2] = (long) 134217729;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[7];
      longArray6[0] = (long) (-1216);
      longArray6[1] = (long) 1581;
      longArray6[2] = (long) 389;
      longArray6[3] = (-574L);
      longArray6[4] = 9007199254740990L;
      longArray6[5] = (long) 11;
      longArray6[6] = (long) 1581;
      longArray0[5] = longArray6;
      long[] longArray7 = new long[7];
      longArray7[0] = (long) (-1216);
      longArray7[1] = (long) 8;
      longArray7[2] = (long) 389;
      longArray7[3] = (long) 389;
      longArray7[4] = 2329L;
      longArray7[5] = (long) 389;
      longArray7[6] = (-2190L);
      longArray0[6] = longArray7;
      long[] longArray8 = new long[9];
      longArray8[0] = (-2190L);
      longArray8[1] = (long) 1581;
      longArray8[2] = 604L;
      longArray8[3] = (long) (-1216);
      longArray8[4] = (-2190L);
      longArray8[5] = (long) 1581;
      longArray8[6] = (-540L);
      longArray8[7] = (long) 8;
      longArray8[8] = (long) 134217729;
      longArray0[7] = longArray8;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -574 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      double[][] doubleArray0 = new double[2][9];
      int[] intArray0 = new int[2];
      intArray0[0] = 108;
      intArray0[1] = 1914;
      MathArrays.distance(intArray0, intArray0);
      MathArrays.linearCombination(0.0, 866.23, 0.0, (-71.6), 0.0, (-414.3166), (double) 1914, (-397.686781));
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 1914;
      doubleArray1[1] = 0.0;
      doubleArray1[3] = 979.9;
      doubleArray1[4] = 979.9;
      doubleArray1[5] = (-3137.658526025981);
      doubleArray1[6] = (-397.686781);
      doubleArray1[7] = 866.23;
      doubleArray1[8] = 1.7976931348623157E308;
      MathArrays.scaleInPlace(3880.6279431299, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-753.819585930443);
      doubleArray0[1] = (-753.819585930443);
      doubleArray0[2] = (-753.819585930443);
      doubleArray0[3] = (-753.819585930443);
      doubleArray0[4] = (-753.819585930443);
      doubleArray0[5] = (-753.819585930443);
      doubleArray0[6] = (-753.819585930443);
      double[] doubleArray1 = MathArrays.scale((-753.819585930443), doubleArray0);
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      MathArrays.linearCombination((-753.819585930443), (-753.819585930443), 1.0E-5, 0.0, (-753.819585930443), (-753.819585930443));
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray0, doubleArray1);
      MathArrays.ebeSubtract(doubleArray2, doubleArray1);
      int[] intArray0 = new int[6];
      int int0 = 0;
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("+'*+vIlFe");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.+'*+vIlFe
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-233.682F);
      floatArray0[1] = (-4049.71F);
      floatArray0[2] = (-4049.71F);
      floatArray0[3] = 0.0F;
      floatArray0[5] = 3.4028235E38F;
      floatArray0[6] = 2842.353F;
      floatArray0[7] = (-1.0F);
      floatArray0[8] = 0.0F;
      MathArrays.equals(floatArray0, floatArray0);
      MathArrays.linearCombination(0.0, (double) 2842.353F, (double) 2842.353F, (-322.4699), (double) 2842.353F, (double) 0.0F, (double) 0.0F, (-5025.2916));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) (-4049.71F);
      doubleArray0[2] = (-916573.2964922363);
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) 2842.353F;
      doubleArray0[5] = (double) 0.0F;
      doubleArray0[6] = 2842.35302734375;
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (double) (-4049.71F);
      doubleArray1[2] = (double) (-233.682F);
      MathArrays.equals(doubleArray0, doubleArray1);
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(field0).getZero();
      float[] floatArray1 = new float[4];
      floatArray1[0] = (-233.682F);
      floatArray1[1] = (-1.0F);
      floatArray1[2] = (-1.0F);
      floatArray1[3] = (-109.04234F);
      MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      MathArrays.buildArray(field0, 1788, 1788);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 2217.777167;
      doubleArray0[3] = 1280.82910024969;
      MathArrays.equals(doubleArray0, doubleArray0);
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      MathArrays.distance1(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.copyOf(doubleArray0, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1413.900363413257;
      doubleArray0[2] = 3223.8246173;
      doubleArray0[3] = (-2044.9376266557222);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-993.4213293466469);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (-727.061473976778);
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 1413.900363413257;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (-993.4213293466469);
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 1413.900363413257;
      MathArrays.convolve(doubleArray0, doubleArray1);
      MathArrays.linearCombination((-727.061473976778), 1413.900363413257, (-5522.009), 0.0);
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = (-993.4213293466469);
      doubleArray2[2] = (-993.4213293466469);
      doubleArray2[3] = (-5522.009);
      doubleArray2[4] = 1413.900363413257;
      doubleArray2[5] = 1.34217729E8;
      doubleArray2[6] = (-727.061473976778);
      try { 
        MathArrays.checkOrder(doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= -993.421)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 3020.0;
      doubleArray0[1] = 0.0;
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Double double0 = new Double(1073.97);
      Integer[] integerArray0 = new Integer[6];
      int int0 = 1;
      Integer integer0 = new Integer(1);
      Integer.compare(5, 126);
      integerArray0[0] = integer0;
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      integerArray0[1] = (Integer) int0;
      Integer integer1 = new Integer(134217729);
      integerArray0[2] = integer1;
      Integer integer2 = new Integer((int) integerArray0[2]);
      integerArray0[3] = integer2;
      Integer integer3 = new Integer(2777);
      integerArray0[4] = integer3;
      Integer integer4 = new Integer(134217729);
      integerArray0[5] = integer4;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }
}
